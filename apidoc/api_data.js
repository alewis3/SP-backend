define({ "api": [  {    "type": "post",    "url": "/users",    "title": "Create/register a new user",    "name": "CreateUser",    "group": "Users",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "email",            "description": "<p>A unique email to register with (This acts as their username)</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "password",            "description": "<p>A strong password in plaintext. This is hashed on the API side.</p>"          },          {            "group": "Parameter",            "type": "Object",            "optional": false,            "field": "name",            "description": "<p>An object containing &quot;first&quot; and &quot;last&quot; fields</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "name[first]",            "description": "<p>The user's first name</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "name[last]",            "description": "<p>The user's last name</p>"          },          {            "group": "Parameter",            "type": "String",            "allowedValues": [              "\"Contributor\"",              "\"Homeowner\"",              "\"Business Owner\""            ],            "optional": false,            "field": "accountType",            "description": "<p>The account type of the user.</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "dob",            "description": "<p>The user's Date of Birth in &quot;MM/DD/YYYY&quot; format</p>"          },          {            "group": "Parameter",            "type": "Object",            "optional": false,            "field": "address",            "description": "<p>An object containing &quot;streetAddress&quot;, &quot;city&quot;, &quot;state&quot;, and &quot;zip&quot; fields</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "address[streetAddress]",            "description": "<p>The user's street Address including number and street name</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "address[city]",            "description": "<p>The user's city e.g. &quot;Austin&quot; or &quot;Dallas&quot;</p>"          },          {            "group": "Parameter",            "type": "String",            "size": "2",            "optional": false,            "field": "address[state]",            "description": "<p>The user's state in this format: Texas -&gt; &quot;TX&quot; or California -&gt; &quot;CA&quot;, etc</p>"          },          {            "group": "Parameter",            "type": "Number",            "optional": false,            "field": "address[zip]",            "description": "<p>-&gt; The user's zip code in number format (5 digits and valid US zip)</p>"          }        ]      },      "examples": [        {          "title": "Valid-Request-Example:",          "content": "{\n    \"email\": \"alewis3@stedwards.edu\",\n    \"password\": \"password\",\n    \"name\": {\n        \"first\": \"Amanda\",\n        \"last\": \"Lewis\"\n    },\n    \"accountType\": \"Homeowner\",\n    \"dob\": \"07/16/1998\"\n    \"address\": {\n        \"streetAddress\": \"3001 S. Congress Ave.\",\n        \"city\": \"Austin\",\n        \"state\": \"TX\",\n        \"zip\": 78704\n    }\n}",          "type": "json"        }      ]    },    "success": {      "fields": {        "Created 201": [          {            "group": "201",            "type": "Boolean",            "optional": false,            "field": "registrationStatus",            "description": "<p>Will be true if successful registration</p>"          }        ]      },      "examples": [        {          "title": "CreatedResponse:",          "content": "HTTP/1.1 201 CREATED\n{\n    \"registrationStatus\": true\n}",          "type": "json"        }      ]    },    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "FormattingError",            "description": "<p>The body of the request was not formatted properly.</p>"          }        ]      },      "examples": [        {          "title": "BadRequest:",          "content": "HTTP/1.1 400 Bad Request\n{\n    \"registrationStatus\": false,\n    \"error\": \"FormattingError: ______\"\n}",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "SP-backend/routes/users.js",    "groupTitle": "Users"  },  {    "type": "get",    "url": "/users",    "title": "Authenticate a user for login",    "name": "LoginUser",    "group": "Users",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "email",            "description": "<p>The email that the user signed up with</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "password",            "description": "<p>The password that the user signed up with</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Boolean",            "optional": false,            "field": "loginStatus",            "description": "<p>Will be true if successful login</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "accountType",            "description": "<p>The type of the user that was authenticated</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 OK\n{\n    \"loginStatus\": true,\n    \"accountType\": \"Contributor\"\n}",          "type": "json"        }      ]    },    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "UserNotFound",            "description": "<p>The email of the user could not be found</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "WrongCredentials",            "description": "<p>The password of the user does not match the password in the DB</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "NotValidated",            "description": "<p>The user has not validated their account yet</p>"          }        ]      },      "examples": [        {          "title": "UserNotFound:",          "content": "HTTP/1.1 404 Not Found\n{\n  \"loginStatus\": false,\n  \"error\": \"UserNotFound\"\n}",          "type": "json"        },        {          "title": "WrongCredentials:",          "content": "HTTP/1.1 401 Unauthorized\n{\n  \"loginStatus\": false,\n  \"error\": \"WrongCredentials\"\n}",          "type": "json"        },        {          "title": "NotValidated:",          "content": "HTTP/1.1 401 Unauthorized\n{\n  \"loginStatus\": false,\n  \"error\": \"NotValidated\"\n}",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "SP-backend/routes/users.js",    "groupTitle": "Users"  },  {    "type": "patch",    "url": "/users/validate",    "title": "Validate a user before first login",    "name": "ValidateUser",    "group": "Users",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "userId",            "description": "<p>Fifteen-character id to match on _id field in mongoDB</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "token",            "description": "<p>Randomly generated uuid token to match on for validation.</p>"          }        ]      }    },    "success": {      "examples": [        {          "title": "ValidatedUser",          "content": "HTTP/1.1 200 OK - Render success.pug file",          "type": "json"        }      ]    },    "error": {      "examples": [        {          "title": "UserNotValidated",          "content": "HTTP/1.1 404 Not Found - Render failure.pug file",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "SP-backend/routes/users.js",    "groupTitle": "Users"  },  {    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "optional": false,            "field": "varname1",            "description": "<p>No type.</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "varname2",            "description": "<p>With type.</p>"          }        ]      }    },    "type": "",    "url": "",    "version": "0.0.0",    "filename": "SP-backend/apidoc/main.js",    "group": "_Users_patricklewis_gitRepos_SP_SP_backend_apidoc_main_js",    "groupTitle": "_Users_patricklewis_gitRepos_SP_SP_backend_apidoc_main_js",    "name": ""  }] });
